{"version":3,"sources":["App.module.css","Message/Message.module.css","asset/Messenger_Logo_Color_RGB.png","firebase/firebase.js","firebase/firebaseConfig.js","Message/Message.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Message","forwardRef","ref","username","message","isUser","console","log","Card","className","classes","User","CardContent","Typography","variant","component","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","unsubscribe","collection","orderBy","onSnapshot","includeMetadataChanges","snapshot","docs","map","doc","data","id","prompt","src","messengerLogo","alt","width","height","Form","onSubmit","event","preventDefault","FormControl","Input","placeholder","type","value","onChange","target","IconButton","onClick","add","timestamp","FieldValue","serverTimestamp","color","disabled","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,YAAc,yBAAyB,MAAQ,mBAAmB,WAAa,0B,mBCAjJD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,wB,mBCD5DD,EAAOC,QAAU,IAA0B,sD,uNCO5BC,EAJKC,IAASC,cCHC,CAC1BC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,gBACnBC,MAAO,+CDFYC,Y,iDEsBRC,EAxBEC,sBAAW,WAA8BC,GAAO,IAAnCC,EAAkC,EAAlCA,SAASC,EAAyB,EAAzBA,QAC7BC,GADsD,sCAC7CF,IAAaC,EAAQD,UAEpC,OADAG,QAAQC,IAAIJ,GAER,yBAAKD,IAAKA,GACN,kBAACM,EAAA,EAAD,CAAMC,UAAS,UAAKC,IAAQV,QAAb,YAAwBK,GAAUK,IAAQC,OACrD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAEIC,QAAQ,KACRC,UAAU,MAEVV,EAAO,GAAD,OACHD,EAAQA,SADL,UAEFA,EAAQD,UAAU,eAFhB,aAEmCC,EAAQA,gB,kCCqE1DY,MA5Ef,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNd,EAHM,KAGImB,EAHJ,KA0Cb,OAnCAC,qBAAU,WAKRjB,QAAQC,IAAI,qCACZ,IAAIiB,EAAcnC,EAAGoC,WAAW,YAC7BC,QAAQ,YAAa,QACrBC,WAAW,CAEVC,wBAAwB,IACvB,SAAAC,GACDvB,QAAQC,IAAI,eACZc,EAAYQ,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAAE5B,QAAS4B,EAAIC,OAAQC,GAAIF,EAAIE,WAEzE,OAAO,WACLV,OAED,IAEHD,qBAAU,WACRD,EAAYa,OAAO,6BAElB,IAaD,yBAAK1B,UAAWC,IAAQM,KACtB,yBAAKoB,IAAKC,IAAeC,IAAI,GAAGC,MAAM,MAAMC,OAAO,QACnD,8EACA,uCAAarC,GACb,0BAAMM,UAAWC,IAAQ+B,KAAMC,SAAU,SAAAC,GAAK,OAAIA,EAAMC,mBACtD,kBAACC,EAAA,EAAD,CAAapC,UAAWC,IAAQmC,aAE9B,kBAACC,EAAA,EAAD,CAAOrC,UAAWC,IAAQoC,MAAOC,YAAY,qBAAqBC,KAAK,OAAOC,MAAO/B,EAAOgC,SAAU,SAAAP,GAAK,OAAIxB,EAASwB,EAAMQ,OAAOF,UACrI,kBAACG,EAAA,EAAD,CACE3C,UAAWC,IAAQ0C,WACnBJ,KAAK,SACLK,QAvBU,WAElBhE,EAAGoC,WAAW,YAAY6B,IAAI,CAC5BlD,QAASc,EACTf,SAAUA,EACVoD,UAAWjE,IAASS,UAAUyD,WAAWC,oBAG3CtC,EAAS,KAgBDL,QAAQ,YACR4C,MAAM,UACNC,UAAWzC,GAEX,kBAAC,IAAD,SAIN,kBAAC,IAAD,KAEIE,EAASW,KAAI,gBAAGG,EAAH,EAAGA,GAAI9B,EAAP,EAAOA,QAAP,OACX,kBAAC,EAAD,CAASwD,IAAK1B,EAAI/B,SAAUA,EAAUC,QAASA,UChEvCyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvE,QAAQuE,MAAMA,EAAMzE,c","file":"static/js/main.16d7f957.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1cKli\",\"Form\":\"App_Form__GpNds\",\"FormControl\":\"App_FormControl__DeDB1\",\"Input\":\"App_Input__2Eaob\",\"IconButton\":\"App_IconButton__3HCmE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__16-49\",\"User\":\"Message_User__3DwGT\"};","module.exports = __webpack_public_path__ + \"static/media/Messenger_Logo_Color_RGB.11b1e8bd.png\";","import firebase from 'firebase'\r\nimport {firebaseConfig} from './firebaseConfig'\r\n// Create your own firebase account and use your project config\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst db = firebaseApp.firestore()\r\n\r\nexport default db","export const firebaseConfig = {\r\n    apiKey: \"AIzaSyAi7TFZSsc8QRCaDkA8GbVEggYE90c7Aws\",\r\n    authDomain: \"fb-messenger-demo.firebaseapp.com\",\r\n    databaseURL: \"https://fb-messenger-demo.firebaseio.com\",\r\n    projectId: \"fb-messenger-demo\",\r\n    storageBucket: \"fb-messenger-demo.appspot.com\",\r\n    messagingSenderId: \"1065490556555\",\r\n    appId: \"1:1065490556555:web:2353bc7c2bac231342968e\"\r\n  };","import React, {forwardRef} from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\nimport classes from './Message.module.css'\r\nconst  Message = forwardRef(({username,message,...props}, ref)=>{\r\n    const isUser = username === message.username\r\n    console.log(username)\r\n    return (\r\n        <div ref={ref}>\r\n            <Card className={`${classes.Message} ${isUser && classes.User}`}>\r\n                <CardContent>\r\n                    <Typography \r\n                        // color=\"\"\r\n                        variant=\"h5\"\r\n                        component=\"h2\"\r\n                    >{\r\n                        isUser?\r\n                        `${message.message}`\r\n                        :`${message.username||\"Unknown User\"}: ${message.message}`\r\n                    }\r\n                        \r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import React, { useEffect, useState } from 'react';\nimport { Button, FormControl, InputLabel, Input, IconButton } from '@material-ui/core'\nimport SendIcon from '@material-ui/icons/Send';\nimport FlipMove from 'react-flip-move';\nimport firebase from 'firebase'\nimport db from './firebase/firebase'\nimport Message from './Message/Message'\nimport classes from './App.module.css';\nimport messengerLogo from './asset/Messenger_Logo_Color_RGB.png'\n\nfunction App() {\n  const [input, setInput] = useState('')\n  const [messages, setMessages] = useState([])\n  const [username, setUsername] = useState('')\n  // useState = variable in REACT\n  // useEffect = run code on a condition in REACT\n\n  useEffect(() => {\n    // run once the app component loaded\n    // Set up a listener listening for any changes \n    // at which point it shoots off a snapshot like a \n    // real-time capture of the database\n    console.log(\"Start listening to snapshot of db\");\n    let unsubscribe = db.collection('messages')\n      .orderBy('timestamp', \"desc\")\n      .onSnapshot({\n        // Listen for document metadata changes\n        includeMetadataChanges: true\n      }, snapshot => {\n        console.log(\"new docs...\",);\n        setMessages(snapshot.docs.map(doc => ({ message: doc.data(), id: doc.id })))\n      })\n    return () => {\n      unsubscribe()\n    }\n  }, [])\n\n  useEffect(() => {\n    setUsername(prompt('Please enter your name'))\n    return\n  }, [])\n  const sendMessage = () => {\n    // all the logic to send a message goes\n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    // setMessages([...messages, {username:username,message:input}])\n    setInput('')\n    return\n  }\n  return (\n    <div className={classes.App}>\n      <img src={messengerLogo} alt=\"\" width=\"100\" height=\"100\" />\n      <h1>Hello, Here is FB Messenger Clone made by Gary</h1>\n      <h2>Welcome {username}</h2>\n      <form className={classes.Form} onSubmit={event => event.preventDefault()}>\n        <FormControl className={classes.FormControl}>\n          {/* <InputLabel >Enter a message...</InputLabel> */}\n          <Input className={classes.Input} placeholder=\"Enter a message...\" type=\"text\" value={input} onChange={event => setInput(event.target.value)} />\n          <IconButton\n            className={classes.IconButton}\n            type='submit'\n            onClick={sendMessage}\n            variant='contained'\n            color='primary'\n            disabled={!input}\n          >\n            <SendIcon />\n          </IconButton>\n        </FormControl>\n      </form>\n      <FlipMove>\n        {\n          messages.map(({ id, message }) => (\n            <Message key={id} username={username} message={message} />\n            // <p key={index}>{message}</p>\n          ))\n        }\n      </FlipMove>\n    </div>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}